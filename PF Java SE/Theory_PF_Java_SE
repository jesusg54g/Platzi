/*

En programación, cuando se habla de ciudadanos de primera clase o 
First-class citizens (o first-class constructs o first-class elements), 
es para hacer referencia a un elemento del lenguaje que posee la mayor 
cantidad de privilegios dentro de dicho lenguaje.

A pesar de lo anterior, este no es un término bien definido, ya que 
varía por muchos factores, y el principal de ellos es el lenguaje de 
programación del cual estemos hablando. Pero hay ciertas características 
que generalmente se toman en cuenta para decir si un elemento es de primera 
clase o no:

*Puede ser guardado en variables
*Pueden ser usados como argumentos
*Pueden ser un valor de retorno
*Tienen identidad propia

Es importante señalar que si bien “existen” ciudadanos de primera clase, 
no existen de segunda o tercera. Una cosa es de primera o no lo es.

En java tenemos por ejemplo:
Interfaces
Clases
Structs
tipos de datos primitivos
entre otras cosas


Funciones Puras:
Son funciones que bajo las mismas condiciones y parametros siempre arrojaran
un mismo valor, es decir una funcion la cual sera posible predecir su comportamiento.
Ejemplo:
La funcion suma de dos valores, la cual siempre nos arrojara el mismo resultado
Sum(x+y) conociendo los valores de X y Y siempre podremos predecir el valor de 
esta funcion.
*Otra caracteristica es que esta no genera valores aleatorios.
*Una funcion pura no puede invocar una funcion impura pero una funcion impura
puede invocar tanto una funcion pura como una impura.
*Una funcion pura solo puede invocar otra funcion pura.

Las funciones impuras a diferencia de las funciones puras pueden ocasionar
"efectos secundarios".
Los efectos secundarios son aquellos cambios que se pueden observar desde
fuera del sistema, es decir cambios o alteraciones externos a nuestro entorno
de trabajo.
Por ejemplo una funcion que permita cambiar el color de algun elemento dentro
de nuestro sistema, para ello ello tuvo que haber algun tipo de modificacion
o configuracion a los parametros originales de este elemento, este tipo de 
acciones se conoce como efecto secundario.

Acciones tipicas de efectos secundarios:
*Leer/Crea/Modificar/Borrar archivos.
*Leer/Escribir una base de datos.
*Enviar/Recibir una llamada de red.
*Alterar un objeto/variable usada por otras funciones.

Lo mejor que podemos hacer por nuestro codigo es reducir el numero de funciones
impuras, es inevitable tener efectos secundarios, pero minimizando en lo posible
este tipo de funciones. Lo ideal es tener un codigo bien estructurado donde
las funciones impuras solo actuen como puntos de entrada y salida de nuestro
codigo, pero uno vez obtenida la informacion manejar todo internamente con
funciones puras.

Funciones de orden mayor
*Toma otra funcion como parametro
*Retorna una funcion como resultado

Ventajas:
*Pasar comportamientos
*Compartir un medio de comunicacion(callbacks)
*Compartir logica/reglas

Los landas o funciones Landas son funciones anonimas, no poseen un nombre,
cumple un rol de ser funciones que se utilizan en ocasiones particulares y
que no requieren declarar una funcion en sistema.
Porque usarlas?
*Es un comportamiento de uso unico, ya que las invocas solo cuando las vas
a usar y luego de la ejecucion dejan de existir.
*Una regla que solo se requiere en un lugar, las landas estan definidas para
uso unico en el lugar que fueron creadas y no pueden ser utilizadas mas alla
de ese punto.
*Es una funcion extremadamente simple, al no ser funciones que deban declarar
se como las funciones convencionales pueden ser definidas en pequeños fragmentos
Ejemplo:
int calculateWith(Function calculatorFun) {
	//Realiza los calculos y usa el paramentro ...
	return ...

}

//llamando la funcion
int result = calculateWith(x -> x + 9)

Inmutabilidad

Ventajas:
*Una vez creado no se puede alterar
*Facilita crear funciones puras
*Facilita usar threads/concurrencia

Desventajas:
*Nueva instancia por cada set de modificaciones
*Requiere especial atencion al diseño
*Objetos mutables fuera de nuestro de alcance

Con la fuente Fire Code y activando la ligadura de fuentes podemos
hacer que algunos caracteres especiales consecutivos se puedan unir
que es esencial en el caso de algunas funciones para obtener una mayor
legibilidad y estetica del formato.
Ejemplo:
Pasar de esto -> a esto →

//Un ejemplo de una funcion lambda que recibe como parametro un entero
//y devuelve un boleano para determinar si un numero es inpar(isOdd).
//A traves de la funcion .apply la funcion isOdd puede recibir un parametro
//como argumento y delvolver un resultado, en este caso un boleano que nos
//dira con un verdadero o falso si el numero es inpar.
//Notese que tanto el valor que recibe como el que devuelve estan definidos
//dentro de la sintaxis de Function.
// recibe       devuelve
//    x    ->   x % 2 = 1
Function<Integer, Boolean> isOdd = x -> x % 2 == 1;
isOdd.apply(5); //True
System.out.println(isOdd.apply(5));

//A traves de la funcion predicate s diferencia del caso anterior, siempre
//va a devolver un boleano como resultado, por lo que solo debemos definir
//el tipo de argumento que recibe y la operacion logica para evaluar la condicion.
Predicate<Integer> isEven = x -> x % 2 == 0;
isEven.test(4); //True
Sytem.out.println(isEven.test(4));

Predicate<Student> isAproved = student -> student.getCalificacion() >= 6.0;

Student sinuhe = new Student(5.9);
isAproved.test(sinuhe); //False
System.out.println(isAproved.test(sinuhe));

}

static class Student {
private double calificacion;

	public Student(double calificacion) {
	this.calificacion = calificacion;
	}

    public double getCalificacion() {
        return calificacion;
    }

}

static int square(int x) {
    return x * x;
}



*/