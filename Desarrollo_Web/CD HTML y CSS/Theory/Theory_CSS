red
Recordar que el margin es el espacion que se aplica de los 
limites de la caja o contenedor hacia afuera, mientras que 
el padding es el espacio que se aplica de los limites 
hacia adentro
red

red
 box-sizing: border-box;
 Esta propiedad permite calcular el valor en pixeles de la 
 caja considerando el magin, padding y el border en su 
 valor final, es decir:

•content-box:(valor por defecto)
•clientWidth = width + padding + border

Si consideramos un contenedor con valores iniciales de 
width = 250px y height = 250px, y empezamos a agregar 
valores al margin, padding y al border las dimensiones 
finales del content-box por defecto sera muy diferentes 
a las que asignamos al contenedor, por lo que es complicado 
poder llevar un control de las medidas finales de nuestro 
diseño, sin embargo aqui es donde entra la propiedad 
box-sizing: border-box la cual toma en considerancion todas 
las medidas adicionales(margin, padding, border) y el ajusta 
el valor final de nuestro contenedor al valor que predefinimos 
originalmente(width = 250px y height = 250px), es decir:

•border-box:
•clientWidth = width - padding - border

 * {
    box-sizing: border-box;
    margin: 0px;
    padding: 0px;
}

red

****Importancia****
•Hoja de estilo de agente de usuario (Estilos del navegador)
•Declaraciones normales en hojas de estilo de autor (Nuestro 
.CSS)
•Declaraciones importantes en hojas de estilos de autor (
utilizar el !important)

****Orden de las fuentes****
En tus estilos, las declaraciones al final del documento 
anularan a las que sucedan antes en caso de conflicto

Las fuentes podemos declararlas de multiples maneras, una 
de ellas es haciendolo directamente en la hoja de estilos 
mediante los selectores, sin embargo cuando queramos 
utilizar una fuente que no tengamos instalada en nuestro 
equipo podemos hacer uso de enlaces externos a librerias 
de fuentes que nos permiten vincular una fuente especifica 
a nuestra pagina, para ello por ejemplo en el caso de 
google font vamos a agrear a nuestro head el link que nos 
va a proporcionar la pagina de google font para vincular 
la fuente, y desde la hoja de estilo la llamaremos a traves 
de los selectores como cualquier otra fuente usando 
font-famili: "font_name"

Propiedades para los textos

Además de todas las propiedades comunes que comparten los elementos estándar de html, como: display, position, margin, padding, top, left, right, bottom, border, etc., los elementos que admiten contenidos textuales aceptan una serie particular de propiedades entre las que se encuentran las siguientes:

•font-family: define el tipo de fuente aplicado al texto.
•color: define el colore del texto.
•line-height: define la altura desde la base del texto hasta la base de la siguiente línea de texto.
•font-size: define el tamaño del texto, admite cualquiera de las unidades de medida disponibles.
•letter-spacing: define el espaciado entre las letras del texto.
•font-weight: define el ““peso”” de la letra, negrita, normal, light y normalmente se indica en múltiplos de 100 o usando keywords.
•text-decoration: define el decorado del texto como subrayado, tachado, con subrayado superior, etc.
•text-transform: permite transformar el estado de mayúsculas / minúsculas en el texto, usando uppercase para mayúsculas sostenidas, lowercase para minúsculas sostenidas, etc.


****Especificidad****
La Especificidad define el orden que seran aplicados los 
estilos de nuestra pagina en funcion de como fueron 
declarados, muchas veces tendremos etiquetas o elementos 
que poseen mas de una identificacion, ya sea clase, id, 
nombre, incluso tipo de etiqueta, a la hora de establecer 
las propiedades de estos elementos. En nuestra hoja de 
estilos el editor va a tomar por orden de importancias 
que propiedades va a aplicar, muchas veces tenemos un 
selector aplicado a una clase de un elemento, pero 
tambien podemos tener la misma propiedad aplicada al 
mismo elemento pero con selector aplicado al id, en 
ese caso la especificidad da mayor rango de importancia 
al id por lo tanto aun si el selector de clase alla 
sido aplicado luego que el de id, el id posee una 
mayor importancia por tanto no aplicara el de clase.
Ejemplo:
<h1 id="page-title" class="title">Empresa</h1>

<style>

#page-title {
    font-family: Arial, Helvetica, sans-serif;
}

.title {
    font-size: 18px;
    font-family: monospace
}

</style>

En este la fuente aplicada en la clase title no 
sera tomada en cuenta.

En la herramientas de desarrolladores de google 
chrome al inspeccionar un elemento a la derecha 
en la pestaña de Styles veremos colocado en orden
de especificidad (de arriba hacia abajo) la 
importancia de cada selector y las propiedades 
aplicadas a dicho elemento.

*****Reglas para Selectores*****
A la hora de establecer la declaracion de nuestros 
selectores muchas veces tenemos mas de un selector 
para un mismo elemento, ya sea un id, class, o la 
misma etiqueta, para llevar un orden y un mejor 
control sobre nuestros selectores es recomendable 
no utilizar id, estilos embebidos o !important, 
debido a que esto puede ocasionar conflictos y 
confusion a medida que nuestro proyecto creece 
por lo que es buena practica usar siempre en la 
medida de la posible clases, etiquetas o 
pseudoelementos.

1. Selector de etiqueta: refiere a etiquetas HTML, como el ejemplo de la imagen.
2. Selector descendiente: refiere a etiquetas HTML de forma hereditaria.
3. Selector de id: refiere a atributos id de etiquetas HTML.
4. Selector de class (clase): refiere a atributos class de etiquetas HTML.

Algunos de los estándares más usados para la identificación de clases son:
•OOCSS
•BEM
•Component CSS

****Regla de los Combinadores****
•Hermanos adyacentes(Next to): Este selector se aplicara 
de la siguiente manera:
tag1 + tag2 {
	property: value;
}
En este caso la propiedad se aplicara a todas los 
tag2 que sean precedidos por un tag1, es decir a 
todas las etiquetas2 que tengan antes de ellos una 
etiqueta1

•Hermanos Generales(Beside): Este selector se 
aplicara de la siguiente manera:
tag1 ~ tag2 {
    property: value;
}
En este caso la propiedad se aplicara a todos los 
tag2 que esten en el mismo orden de jerarquia de el 
tag1, es decir todas las etiquetas2 hermanas y que se 
encuentren posteriores a la etiqueta1, es decir aquellas 
etiqueta2 declaradas antes de la etiqueta1 no seran tomadas
en cuenta. 
Ejemplo:

<div>
	<p>Soy un parrafo</p> --> Esta no es tomada en cuenta
    <h2>Soy un h2</h2>
    <p>Soy un parrafo</p>
    <h2>Soy un h2</h2>
    <h3>Soy un h3</h3>
    <p>Soy un parrafo</p>
</div>
h2~p {
    color: red;
}

•Hijos(Directly): Este selector se aplicara de 
la siguiente manera:
tag1 > tag2 {
    property: value;
}
En este caso la propiedad se aplicara a todos los tag2 que 
sean hijos directos de tag1.

•Descendientes: Este selector se aplicara de 
la siguiente manera:
tag1 tag2 {
    property: value;
}
En este caso la propiedad se aplicara a todos los tag2 que 
esten contenidos dentro de una etiqueta tag1

red
****Pseudo Selectores****
red

•Hijos primeros(:first-child):Este selector se aplicara de 
la siguiente manera:
tag1:first-child {
    property: value;
}
Este selector sera aplicado en todos los tag1 que sean 
hijos primeros.
Ejemplo:
<div>
	<p>Soy un parrafo</p> --> aplica solo en este p
    <h2>Soy un h2</h2>
    <p>Soy un parrafo</p>
    <h2>Soy un h2</h2>
    <h3>Soy un h3</h3>
    <p>Soy un parrafo</p>
</div>
p:first-child {
	color:blue;
}

•Hijos unicos(:only-child):Este selector se aplicara de 
la siguiente manera:
tag1:only-child {
	property: value;
}
Este selector sera aplicado unicamente sobre los tag1 
que contengan solo una etiqueta. Habran casos mas complejos 
donde tendremos que hacer una seleccion multiple utilizando 
comas "," e incluso podremos combinar otros selectores. 
Ejemplo:
<div>
	<plate>
		<apple/>
	</plate>
	<plate>
		<pickle/>
	</plate>
	<bento>
		<pickle/>
	</bento>
	<plate>
		<orange class="small"/>
		<orange />
	</plate>
	<pickle class="small"
</div>
En este caso se deseara elegir solo las apple y pickles 
contenidos dentro de un plate para aplicar una propiedad lo 
haria de la siguiente forma:
plate pickle,apple:only-child {
	color:red;
}
Como podemos ver hay dos etiquetas pickles que son hijos 
unicos, una contenida dentro de un plate y otra dentro 
de un bento, debido a esto no podemos colocar unicamente
pickle, apple:only-child, la unica manera es aplicar un 
combinador adicional a la etiqueta pickle para expresar 
cual de los dos deseamos elegir.

•Hijos ultimos(:last-child):Este selector se aplicara de 
la siguiente manera:
tag1:last-child {
	property: value;
}
Este selector se aplicara unicamente a los tag1 que sean 
ultimos hijos, si hay un solo tag1 dentro de una etiqueta 
se aplicara sobre esa.

Hijo por posicion(:nth-child(position)):Este selector se 
aplicara de la siguiente manera:
tag1:nth-child(position) {
	property: value;
}
Este selector se aplicara unicamente al tag1 contenido dentro 
de una etiqueta div y que sea la posicion indicada contando 
del primero al ultimo
Ejemplo:
<div>
	<p>Soy un parrafo</p>
	<p>Soy un parrafo</p>
	<p>Soy un parrafo</p>
	<p>Soy un parrafo</p> --> Se aplicara solo sobre esta
	<p>Soy un parrafo</p>
</div>
p:nth-child(4) {
	color:red;
}

Hijo por Posicion invertida(:nth-last-child(position)):Este 
selector se aplicara de la siguiente manera:
tag1:nth-last-child(position) {
	property: value;
}
Este selector se aplicara unicamente al tag1 contenido dentro 
de una etiqueta div y que sea la posicion indicada pero esta 
vez contando del ultimo hacia atras.
Ejemplo:
<div>
	<p>Soy un parrafo</p>
	<p>Soy un parrafo</p> --> Se aplicara solo sobre esta
	<p>Soy un parrafo</p>
	<p>Soy un parrafo</p> 
	<p>Soy un parrafo</p>
</div>
p:nth-child(4) {
	color:red;
}

Primero de su tipo(:first-of-type):Este selector se 
aplicara de la siguiente manera:
tag1:first-of-type {
	property: value;
}
Este selector se aplicara unicamente a la primera 
etiqueta de tipo etiqueta1:

<div>
	<p>Soy un parrafo</p> --> aplica solo en este p
    <h2>Soy un h2</h2>
    <p>Soy un parrafo</p>
    <h2>Soy un h2</h2>
    <h3>Soy un h3</h3>
    <p>Soy un parrafo</p>
    <h6>Soy un h6</h6> --> aplica solo en este h6
</div>
h6:first-of-type {
	color:blue;
}

Par o inpar(:nth-of-type(even) or :nth-of-type(odd)):Este 
selector se aplicara de la siguiente manera:
tag1:nth-of-type(odd or even) {
	property: value;
}
Este selector se aplicara unicamente sobre las etiquetas 
pares o impares de tipo tag1.
Ejemplo:
<div>
	<p>Soy un parrafo</p>
	<p>Soy un parrafo</p> --> Se aplicara sobre esta
	<p>Soy un parrafo</p>
	<p>Soy un parrafo</p> --> Se aplicara sobre esta
	<p>Soy un parrafo</p>
</div>
p:nth-of-type(odd) {
	color:red;
}

N type con formula(:nth-of-type(step+startFrom)):Este 
selector se aplicara de la siguiente manera:
tag1:nth-of-type(step+startFrom) {
	property: value;
}
Este selector se aplicara sobre las etiquetas que cumplan 
con la condicion de la formaula.
Ejemplo:
<div>
	<p>Soy un parrafo</p>
	<p>Soy un parrafo</p> 
	<p>Soy un parrafo</p> --> Se aplicara sobre esta
	<p>Soy un parrafo</p> 
	<p>Soy un parrafo</p> --> Se aplicara sobre esta
	<p>Soy un parrafo</p>
	<p>Soy un parrafo</p> --> Se aplicara sobre esta
	<p>Soy un parrafo</p>
</div>
p:nth-of-type(2n + 3) {
	color:red;
}
Este selector se aplicara sobre las etiquetas de tipo p 
que partan de la posicion 3 y a partir de esta solo las 
que esten cada dos instancias.

Unico de su tipo(:only-of-type):Este selector se aplicara 
de la siguiente manera:
tag1 tag2:only-of-type{
	property: value;
}
Este selector se aplicara sobre los tag2 que sean hijos unicos 
de un tag1

Ultimo de su tipo(:last-of-type):Este selector se aplicara 
de la siguiente manera:
tag1 tag2:last-of-type{
	property: value;
}
Este selector se aplicara sobre el ultimo tag2 dentro de cada 
etiqueta tag1. Habran casos en los que deseos el ultimo tag 
de algunas etiquetas contenidas dentro de otra etiqueta, sin 
embargo habran algunas que no deseemos, para ello podremos 
apollarnos de las clases.
Ejemplo:
<div class="table">
	<orange class="small"></orange>
	<orange class="small"></orange>
	<pickle />
	<pickle />
	<apple class="small"/>
	<apple class="small"/>
</div>
En este caso si solo desearamos las ultimas etiquetas de 
tipo apple y orange, no podemos utilizar el tag div ya 
que nos seleccionaria tambien los pickle, tampoco podemos 
usar la combinacion de los tag de apple y orange porque el 
selector no no los permite, por lo que la opcion correcta 
seria utlizar la clase small.
.small:last-of-type

****Medidas****
•Absolutas: son aquellas medidas que no cambian, las cuales 
tiene una representacion constante dentro de nuestra pantalla 
independientemente de donde las estemos viendo, si una 
pantalla mas chica o una mas grande. 
Ejemplo: pixeles o px

•Relativas: son aquellas medidas que varian en funcion de la 
medida de otros elementos, y las cuales sirven para establecer 
una relacion de proporcionalidad mas funcional dependiendo 
del entorno(tamaño de la pantalla) y otras medidas con las 
que tengan una referencia.
Ejemplo: em, rem, 
red
em siempre va a tomar la medida del padre directo, por lo 
que si modificamos la medida del padre Xem, y ademas la 
medida del hijo en Yem, la medida del hijo sera la proporcion 
de la medida final del padre mas la del hijo es decir Xem*Yem.
Debido a esto no es recomendable usar em, una buena practica 
mas recomendada es utilizar las rem
red

blue
rem a diferencia de em va a estar relacionada a la medida 
de la fuente del archivo html por defecto que en este caso
es 16, por lo que 1rem siempre va a valer 16px a menos que 
modifiquemos el valor del font-size del archivo html que 
viene por defecto. Como los rem van a estar proporcionados 
de 16px cada uno una manera de hacer mas comoda mantener 
una proporcion en lo calculos con una menor complejidad es 
hacer que rem por defecto sea 10px, de esta manera lo 
calculos para establecer la proporcion de rem para otras 
medidas sera mucho mas simplificado. Eso lo hacemos ajustando 
el valor de font-size:
html {
	font-size: 62.5%; ---> esto hara que ahora rem valga 10px
}
blue

***Posicionamiento de elementos***
•static: Es el posicionamiento por defecto, cuando el 
contenedor esta en static las propiedades de reposicionamiento
(bottom, top, left, rigth) no modificaran su posicion, para 
ello tendremos que hacer uso de la propiedad position y 
asignarle otro valor (absolute, relative, fixed, sticky) las 
cuales nos permitiran poder establecer el resposicionamiento 
en funcion de nuestras necesidades

•absolute: Este posicionamiento toma como referencia el 
ancestro mas cercano que no sea statico, es decir que tenga 
algun posicionamiento vinculado a el, si ninguno de los 
ancestro tiene algun tipo de posicionamiento tomara como 
referencia el mismo contenedor html. Este posicionamiento 
siempre toma como referencia el lado del contenedor que 
estemos asignando en la propiedad del elemento. Si ponemos 
por ejemplo right la medida que coloquemos sera cuantas 
unidades(pixeles o rem) le faltan al elemento para llegar 
al lado derecho del contenedor y alli lo ubicara respecto a 
X. (no esta en el flujo normal de la pagina, por eso esta 
posicion rompe la configuracion original del layout)

Ejemplo
div {
	position: absolute;
	right: 40px;
	top: 10px;
}
Esto ubicara este contenedor div a 40 px de la esquina 
superior derecha y a 10px de arriba hacia abajo.
Hay que acotar que si colocamos un posicionamiento a 
la derecha por ejemplo y luego otro a la izquierda el 
que quedara definido sera el ultimo el de la izquierda 
y no tomara en cuanta el de la derecha.

***OJO***red green blue
La posicion de un contenedor siempre sera absoluta respecto 
a su contenedor padre mas cercano no estatico, por lo que 
es recomendable si usamos un contenedor de contenedores 
(contenedor padre), el cual se usa para manipular de mejor manera nuestros contenedores de contenido (contenedor hijo), 
posicionemos al padre como relativo y asi cualquier contenedor 
hijo que se posicione de manera absoluta podra tomar como 
referencia los limites del contenedor padre.
Curso Responsive Design clase 15
red green blue

•fixed: Esta propiedad hace que elemento se fije en un lugar 
en especifico dependiendo de como este posicionado con 
respecto a su contenedor padre(top, bottom, left, right) y 
sin importar si hacemos scroll o nos desplazamos de arriba 
hacia abajo o viceversa dentro de la pagina ese elemento no 
se movera de esa posicion pero se va a mantener visible en el 
viewport.

•sticky: Esta propiedad hace que un elemento se fije al 
viewport cuando bajemos o subamos y aparezca en pantalla, 
si no hay una posicion establecida como referencia ya sea 
botton, top, left o right, este no hara ningun efecto.

red
*Si ambos, top y bottom están especificados (técnicamente, no auto), top gana.
*Si ambos, left y right, están especificados,  left gana cuando es ltr (Inglés, japonés horizontal, etc.) y right gana cuando direction es rtl (Persa, árabe, hebreo, etc.).
red

•relative: la diferencia entre este y el absolute es que 
relative toma como referencia el contenedor ancestro 
inmediatamente superior independientemente si este esta 
posicionado o no.

***Display***
A traves de la propiedad display podemos manipular la 
estructura de un contenido de tipo texto, permitiendonos 
establecer la cantidad de espacio que ocupara el texto 
dentro del contenedor.

•display:block; Esta propiedad nos permite utilizar todo 
el espacio de nuestro contenedor que por defecto esta en 
linea con el texto que necesitemos, adicionalmente podemos 
manipular el margin, padding y el borden en funcion de lo 
que necesitemos.
Es importante acotar que block colocara las etiquetas una 
sobre otra.
•display:inline; Esta propiedad nos permite colocar las 
etiquetas una seguida de otra en una misma linea, es 
decir cada etiqueta no podra ocupar mas de una lina por 
lo que podremos manipular las propiedades left y right pero 
no las top o bottom de este tipo de etiquetas.
•display:inline-block; Este propiedad resulta ser la mas 
practica de las 3 ya que nos permite colocar las etiquetas
en sus contenedores una seguida de la otra dentro del 
mismo bloque (la dimension del bloque lo decidira la etiqueta 
padre la cual podremos manipular en funcion de nuestras 
necesidades), y cada etiqueta podra manipular su margin, 
padding o border como un contendedor normal para ajustar 
su posicion respecto a las otras.


***Display:flex***
Esta propiedad permite al contenedor padre poder reacomodar 
todos los contenedores hijos que este tenga de una manera 
mas dinamica. Los ubicara por defecto en una linea horizontal

•flex direction: Nos permite reacomadar la direccion en la 
que estan desplegados los contenedores, de manera horizontal 
(por defecto), vertical, o invirtiendo el orden horizontal o 
verticalmente. Existen otros valores pero estos son los mas 
utilizados.

•flex-wrap: Esta propiedad permite ajustar los contenedores 
apilandolos verticalmente a medida que ajustamos el ancho de 
la pagina. Esta propiedad puede ser aplicada de manera inversa 
lo que reoorganizara los contenedores pero en el orden inverso 
al original.

•flex-shrink: Capacidad de encogimiento del elemento.
o Valor entre 0 y 1: de 0% encogible a 100% encogible

•justify-content: Esta propiedad permite entre otras opciones 
ajustar la posicion de los contenedores hijos respecto al 
contenedor padre, si por ejemplo colocamos center, movera todo 
el bloque de contenedores al centro del contenedor padre 
mateniendo la direccion de los contenedores y ajustando las 
medidas a la izquierda y derecha de los mismos respecto al 
contenedor padre.
Con la propiedad flex-end o flex-star desplazaremos los 
cotenedores hijos al borde derecho o iquierdo del contenedor 
padre(Si incialmente estan todos los contenedores comenzando 
desde la izquierda y ponemos flex-end se moveran al final, 
es decir al lado derecho del contenedor padre).
Con space-around me reacomoda los contenedores dejando el mismo
espacio entre cada uno, pero sin importar el espacio entre el 
primero y el ultimo respecto al contenedor padre.
A diferencia de space-around, space-evenly si me proporciona los 
espacios entre cada contenedor e incluso el del primero e 
ultimo de manera equitativa

****Flex en Vertical****
align-items es propiedad de flex que nos permitira mover 
contenedores de manera vertical, dentro del contenedor padre.

•align-items:center me mueve los contenedores al centro 
en el Y del contenedor padre, manteniendo su posicion respecto 
a X.
•align-items:flex-end me los movera al final del 
contenedor padre, como estamos moviendonos verticalmente eso 
seria hacia abajo, con flex-start seria lo opuesto, nos 
moveriamos al principio.
•align-items:stretch me estirara el contenedor 
verticalmente para que ocupe el 100% del contenedor padre, 
esto simpre y cuando los contenedores hijos no tengan una 
altura previa definida.
•align-items:baseline me ajustara la altura del contenedor 
al tamaño de su contenido, si por ejemplo tenemos un texto 
el alto se ajustara a ese tamaño. Al igual que en el caso 
de strecht los contenedores hijos no deberan tener una 
altura previa definida.

Por defecto el orden de los contenedores estara influenciado
por el orden que fue realizada la declaracion de las etiquetas 
del primero al ultimo en el caso de flex nos los colocara por 
defecto en linea recta de izquierda a derecha partiendo del 
origen por defecto, la esquina superior izquierda, sin embargo
con la propiedad  order podemos reubicarlos a gusto manteniendo
la misma estructura de alineacion, al colocar en la etiqueta 
un numero en especifico, por ejemplo order:3, este se movera 
a la derecha o izquierda para reposicionarse, al igual que 
todos aquellos que reposicionemos, sin embargo aquellos que 
a los que no les apliquemos order se moveran a la izquierda 
manteniendo el orden previo antes de utilizar order.
red
order tambien funciona con valores negativos lo que invierte 
el sentido
red

Con la propiedad flex-grow: 1; aplicada a alguno de los 
contenedores hijos permitira que este ocupe todo el espacio 
que falte para que los contendores ocupen el 100% width, si 
lo aplico a otro contenedor redistribuira el espacio entre 
estos dos manteniendo el mismo que tenian los otros 
contenedores, y haciendolos crecer al mismo tiempo y en la 
misma proporcion que se estira o encoge la pantalla.

Si le colocamos al CSS de los contenedores hijos la propiedad 
flex-basis:width_value (la cual nos permite establecer un valor 
minimo del ancho del contenedor) flex-grow:1 (lo que nos ajustara el ancho de todos los contenedores hijos a un mismo 
valor que aumentara y disminuira simultaneamente a medida que 
estiramos o encogemos la pagina) y ademas le colocamos al 
contenedor padre la propiedad flex-wrap:wrap esto nos permitira 
poder estirar o encoger la pantalla y que los contenedores hijos 
se reacomoden automaticamente.

red
Nota que cuando es una columna, justify-content cambia a vertical y align-items a horizontal.
red


Si tengo un elemento con display flex y flex-direction column ¿Con qué propiedad centro su contenido verticalmente?

Si tengo un elemento con display flex y flex-direction column ¿Con qué propiedad centro su contenido horizontalmente?


¿Dentro de qué etiqueta html ubicamos el <title></title>?

***Etiqueta de hipervinculo o ancla <a href=""></a>****
Esta etiqueta permite asignarle a un texto un enlace de  redireccionamiento a otra pagina, o algun contenido de la 
pagina que estemos viendo en el momento. Para ir a otra 
pagina basta con colocar el enlace de referencia dentro 
del href, si por el contrario queremos ir a algun contenido 
especifico dentro de la misma pagina que estamos viendo, 4
dentro de href colocamos el id del tag al que queremos nos 
centre el foco de la pagina.
Ejemplo:
<a href="#formularios"></a> -> piso aqui
<form id="formularios"></form> -> y me lleva aqui

magenta
*****target*****
Especifica en donde desplegar la URL enlazada:

_self: Carga la URL en el mismo contexto de navegación que el actual. Este es el comportamiento por defecto.
_blank: Carga la URL en un nuevo contexto de navegación. Usualmente es una pestaña, sin embargo, los usuarios pueden configurar los navegadores para utilizar una ventana nueva en lugar de la pestaña.
_parent: Carga la URL en el contexto de navegación padre (parent) del actual. Si no existe el padre, este se comporta del mismo modo que _self.
_top: Carga la URL en el contexto más alto de navegación (el cual es un ancestro del actual, y no tiene padre (parent)). Si no hay padre (parent), este se comporta del mismo modo que _self.
magenta

red
Para colocar en negritas un texto en vez de usar font-style 
usamos font-weight: bold;
red

****Unidades de medida y colores****
Hay varias unidades de medida con las que se puede trabajar en CSS: %, em, rem, px, pt, fr, vw, vh
Las medidas más comunes y utilizadas son los pixeles. Un píxel es la menor unidad homogénea en color que forma parte de una imagen digital. Es la unidad más práctica y fácil de utilizar y manipular, y es la que utilizaremos mayormente en este curso.

Los colores en CSS pueden ser representados de al menos tres formas diferentes:

•Representados con palabras claves para cada color, como: red, green, blue, pink, yellow, black, etc.
•Usando la composición de tres colores (rojo, verde y azul): para esto podemos usar notación hexadecimal o las funciones rgb() y rgba().
•Usando la composición mediante valores de Matiz, Saturación y Luminosidad con: hls() y hlsa().

Con respecto a los valores hexadecimales, cada color está representado por 6 digitos, que representan 3 pares de hexadecimales: FF - FF - FF (rojo, verde y azul), en el que cada par puede tomar valores hexadecimales entre 00 y FF. Cada uno equivale a valores decimales entre 0 y 255, donde 0 es la ausencia de ese color y 255 la mayor cantidad disponible. De esta manera cada color se forma por la combinación de diferentes proporciones de rojo, verde y azul.

#000000 es equivalente a Negro
#FF0000 es equivalente a Rojo
#00FF00 es equivalente a Verde
#0000FF es equivalente a Azul
#FFFFFF es equivalente a Blanco

red
Alt+flecha arriba o abajo movemos un conjunto de elementos 
(varias etiquetas) a la vez para sacarlos o meterlos dentro 
de las etiquetas inferiores o superiores
red

****Backgrounds de color e imagen****

Algunas de las propiedades de css relacionadas con la apariencia del fondo de los elementos son:

•background: con la que se puede indicar un color, o usada de manera extendida, puede incluir color de fondo, url de la imagen, posición y modo de repetición de la imagen.
•background-image: contiene la url que se usará como fondo del elemento.
•background-color: indica el color de fondo, se puede usar en combinación con la imagen.
•background-size: se puede indicar en valores de alto y ancho o en alguna de las palabras claves permitidas: cover o contain.
•background-position: indica la posición de la imagen dentro del elemento, puede indicarse en unidades o en palabras claves como center, left, top y right.
•background-repeat: indica el método de repetición de la imagen de fondo, puede ser: repeat, repeat-x, repeat-y o no-repeat.


****Márgenes****

Los márgenes en CSS son el espacio que separa a los elementos html entre sí. Hay elementos de html que traen márgenes predefinidos (por defecto) en los estilos propios del navegador como el caso de: body, h1, h2, h3, h4, h5, h6, ol, ul, li, p, y muchos otros.

Cuando hay dos márgenes de elementos diferentes que colindan entre sí, se presenta una situación llamada ““margin collapsing”” en la que el mayor margen de los dos se superpone al otro.

blue magenta
Al aplicar display:flex el margin collapsing deja de aplicarse 
por lo que los margenes que separan los elementos empiezan a 
sumarse 
blue magenta

Se puede asignar una medida de margin para los cuatro lados del elemento, o márgenes individuales para cada uno de los lados con: margin-top, margin-right, margin-bottom y margin-left.

Se puede centrar un elemento html colocándole el valor de margin: 0 auto, cuando dicho elemento tiene display block.

red
Los valores de la propiedad margin estan asignados en el 
sentido de las agujas del reloj empezando por top, es 
decir: top, right, bottom, left.
Si tenemos 3 valores top left&right bottom
Si tenemos 2 valores top&bottom left&right
red

****Modelo de caja****

El modelo de caja es un concepto teórico de css que representa a cada elemento html en base sus propiedades de: margin, border, padding y dimensiones (alto y ancho).
Para visualizar un elemento html en su representación como modelo de caja debemos irnos a la parte baja de la sección styles del inspector de elementos, o en la sección llamada Computed.

En el modelo de caja, el ancho total de un elemento html equivale a la sumatoria de los valores de: width, padding-left, padding-right, border-left-width, border-right-width. De manera similar aplica para el alto total de cada elemento. Aunque margin-left y margin-right, forman parte del modelo de caja, no se incluyen para el calculo del ancho total.

Con la propiedad box-sizing, y en particular con el valor border-box de esta propiedad, podemos modificar el comportamiento del modelo de caja para que nuestro elemento nunca supere el tamaño máximo que le hayamos definido en width y height. Esta es la opción recomendada para trabajar.

****Tipos de display*****

Display es la propiedad de css que indica cómo debe ser mostrado un elemento html. Todos los elementos tienen algún tipo de display. Si un elemento no se ve en pantalla es porque seguramente su display es none.

Los valores más comunes que puede recibir la propiedad display son:

•block: el elemento intenta abarcar todo el ancho posible.
•inline: reduce su tamaño exclusivamente hasta lo que abarca su contenido, descartando las propiedades width y height.
•inline-block: combina lo mejor de block e inline, ya que respeta las dimensiones indicadas en las propiedades width y height, pero coloca el elemento en línea (al costado) de elementos hermanos que también tengan display: inline o inline-block.
•flex: asume algunas propiedades por defecto que favorecen la alineación de los elementos internos.
•grid: similar a flex, asume algunas propiedades por defecto organizando los contenidos en filas y columnas.
•none: oculta el elemento.


****Alineando elementos de forma horizontal****

La propiedad de css que nos permite definir la forma en que se alinearán o distribuirán los hijos de un elemento al que se le ha asignado un display flex es: justify-content. Y puede tomar entre otros valores, los siguientes:

•flex-start: para alinear todos los elementos hacia el inicio del espacio disponible.
•flex-end: para alinear todos los elementos hacia el final, a la derecha.
•center: para alinear todos los elementos al centro del espacio disponible.
•space-between: para distribuir los elementos con un espacio proporcional e igual entre ellos.
•space-evenly: para distribuir los elementos con un espacio proporcional e igual entre ellos (incluyendo el primer y último elementos con respecto a los extremos del espacio disponible).
•space-around: similar a space-evenly pero tanto en el primero como en el último elemento, el espacio hacia los extremos es la mitad del espacio usado entre los elementos, esto se debe a que 
space-around proporciona el espaciado a los elementos hijos, el 
primer elemento dentro del contenedor por la izquierda tendra un 
espaciado pero por la derecha tendra ese mismo espaciado mas el 
espaciado por la izquierda del segundo elemento, lo mismo 
sucedera con el ultimo elemento pero a la inversa.

****Alineando elementos de forma vertical****

Similar a como sucede con justify-content, es posible alinear y distribuir los elementos internos en el espacio vertical disponible usando la propiedad align-items, que puede tomar también los valores de: flex-start, flex-end y center.

Algo que es muy importante y se debe tener en cuenta a la hora de usar align-items y justify-content es que dependiendo de la propiedad flex-direction que se haya definido, el efecto de ambos se invierte, no en cuanto a sus elementos internos, sino en cuanto a si se debe usar uno u otro de manera vertical u horizontal.
red magenta blue
IMPORTANTE: Cuando la propiedad flex-direction se ha definido como column, la propiedad justify-content ya no va a aplicar sobre la alineación horizontal, sino sobre la vertical. Y align-items ya no aplicaría sobre la alineación vertical sino la horizontal. Se intercambian sus efectos.
red magenta blue
Para centrar completamente los elementos internos de manera vertical y horizontal en su elemento padre, debemos usar el valor center en ambas propiedades.





