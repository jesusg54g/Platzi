Para inicializar un repositorio de git local usamos el comando:
$ git init
Lo que nos va a generar un carpeta .git en nuestro equipo que 
contendra toda la informacion referente al repositorio local
que acabamos de crear.
Para saber si poseemos claves SSH existentes en nuestro equipo
escribimos el comando:
$ ls -al ~/.ssh
Esto nos va a mostrar una lista con los archivos existentes
referentes a las llaves donde tendremos una llave publica
(id_rsa.pub) y la llave privada(id_rsa.pub) que estara en 
nuestro equipo y que se asegurara que la informacion solo
sea vista por aquellos que tenga el permiso o autorizacion.

Si las llaves no han sido creadas usamos el siguiente comando:
$ ssh-keygen
El cual generara tanto las llaves como la carpeta que las va a
contener, el programa que crea las llave nos va a pedir una 
frase(como una contraseña) la cual nos va a pedir cada vez que
deseemos usar la clave, puede dejarse en blanco si no queremos
escribir la contraseña cada vez.

Una vez creadas las llaves(o si ya existian) procedemos a copiar
la llave de acceso publico que usaremos para referenciar con 
nuestra cuenta de github, usando el siguiente comando:
$ clip < ~/.ssh/id_rsa.pub
Luego nos vamos al repositorio que deseamos clonar, pisamos en 
la parte superior derecha para desplegar el menu, seleccionamos
"Settings", luego en el siguiente menu a la izquierda seleccionamos
"SSH and GPG keys", luego en el boton "New SSH key", alli pondremos
en el titulo el equipo o identificador de donde estaran almacenadas
las llaves, y en el contenido lo que copiamos de la llave y damos
enter.

Luego copiamos el siguiente comando que nos enlazara con el origen
del repositorio master remoto, el que esta en nuestra cuenta de github!:
$ git remote add origin git@github.com:github_name_profile/repositorie.git
y damos enter.
El url que aparece luego de la palabra "origin" lo obtenemos de la pagina
de github posicionados en el repositorio, hacemos click en clone or download
y copiamos el contenido que aparece en la caja de texto con descripcion
"Clone with SSH".

$ git status
Este comando nos muestra todos los archivos en lo que estamos trabajando y
que esten ubicados en la carpeta donde esta la carpeta de inicializacion 
de git(.git) lo cual nos permite saber que archvo se anexarian al staging
si ejecutamos un add.

Para agregar archivos a mi repositorio local en git debo estar dentro de
la carpeta donde se encuentran, luego ejecutamos el comando:
$ git add . (si deseamos agregar todos los archivos alli contenidos) o
$ git add file_name (si solo deseamos agregar un archivo en especifico)

$ git log
Este comando nos muestra el ultimo commit agregado al repositorio local.

Si no hemos agregado un archivo que hemos modifico al area de staging y 
deseamos volver atras a los cambios realizados del archivo original
(este archivo tiene que haber sido guardado previamente antes de la
modificacion), podemos usar un comando que devuelve el archivo a su
estado original y revierte los cambios hechos:
$ git checkout -- file_name
Con este comando podemos retornar a una version previa de un archivo
almacenado en git(devuelve el archivo original hasta la ultima version
donde se realizo un commit).

$ git diff file_name
Con este comando podemos ver las diferencias de las modificaciones
realizadas a un archivo respecto al original que se encuentra en el repositorio local.

Si deseamos excluir de los archivos que subiremos al repositorio algunos
archivos o carpetas contenidas en la carpeta raiz de git, podemos crear
un archivo de texto que llamaremos ".gitignore", adrento de el vamos a 
guardar el nombre del archivo o carpeta que queremos excluir.

$ git branch
Este comando nos indica en que rama nos encontramos actualmente y nos
muestra ademas las ramas creadas en nuestro repositorio local

$ git branch name
Con este comando creamos uno rama(si no existe un nombre igual) y se 
agrega automaticamente a la lista de las ramas registradas en nuestro
repositorio local.

$ git checkout branch
Con este comando nos movemos a la rama seleccionada.

$ git remote add origin https://github.com/jesusg54g/Platzi.git
Con este comando(la parte que inicia en el http.. lo conseguimos en
nuestro repositorio en el boton clonar repositorio, desplegamos esa
opcion y escogemos donde dice https en azul en la parte derecha superior
del recuadro y nos desplegara otro menu con el titulo "Clone with HTTPS"
alli copiamos el contenido de la caja de texto que aparece alli, y ese
va a ser el que usaremos en este comando.)
Existe otra opcion para el uso del login mediante encriptacion (Es mas
seguro y usa el cifrado SSH key el cual hay una introducion mas arriba
pero lleva otro procedimiento.)

Ahora primero es recomendable ejecutar primero una actualizacion del repositorio local al commit mas nuevo, para eso usamos el comando:
$ git pull origin master
Con este comando nos vamos a traer todos los cambios que tengamos en el
repositorio remoto que no tengamos registrados en el repositorio local. 

Si hay algun problema podemos usar el comando:
$ git pull origin branchname --allow-unrelated-histories
El cual nos permitira hacer el pull sin importar la diferencia entre
archivos, muchas veces tenemos un archivo en el remoto diferente al que
tenemos en el local (diferente en el aspecto que no es ni una version 
mas vieja ni una mas nueva, es otro archivo totalmente diferente pero
se llaman igual) y esto trae una serie de incompatibilidades que causan
estos errores.

$ git push -u origin master
Con este comando una vez enlazado nuestro repositorio local con el remoto
ya estamos en la posibilidad de subir nuestros archivos alojados en el 
repositorio local al repositorio remoto de github.


"""Eliminar un remoto""""

Utiliza el comando git remote rm para eliminar una URL remota de tu repositorio.

El comando git remote rm toma un argumento:

El nombre de un remoto, por ejemplo destination (destino)
Ejemplo
Estos ejemplos asumen que estás clonando con HTTPS, lo cual se recomienda.

$ git remote -v
# Ver los remotos actuales
> origin  https://github.com/OWNER/REPOSITORY.git (fetch)
> origin  https://github.com/OWNER/REPOSITORY.git (push)
> destination  https://github.com/FORKER/REPOSITORY.git (fetch)
> destination  https://github.com/FORKER/REPOSITORY.git (push)

$ git remote rm destination
# Eliminar remoto
$ git remote -v
# Verificar que se haya ido
> origin  https://github.com/OWNER/REPOSITORY.git (fetch)
> origin  https://github.com/OWNER/REPOSITORY.git (push)
Nota: git remote rm no elimina el repositorio remoto del servidor. Simplemente, elimina de tu repositorio local el remoto y sus referencias.

Solución de problemas
Te puedes encontrar con estos errores al intentar eliminar un remoto.

No se pudo eliminar la sección de configuración 'remote.[name]'
Este error significa que el remoto que trataste de eliminar no existe:

$ git remote rm sofake
> error: No se pudo eliminar la sección de configuración 'remote.sofake'
Comprueba que escribiste correctamente el nombre del remoto.


Antes de hacer un push o un pull es recomendable revisar la configuracion
actual de las url de los accesos al servidor remoto (origin - master), en 
este caso debemos constatar que estemos la cual vamos a usar como referencia
local para los archivos de nuestro repositorio remoto(master) y chequear con 
el comando "remote" si esta bien configurado el acceso a nuestro repositorio remoto.

