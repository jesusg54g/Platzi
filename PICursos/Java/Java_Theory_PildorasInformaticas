Una manera sencilla de ver Cast:
int x = (int)Math.round(y)
Como voy a almacenar el resultado de la funcion que esta a la 
derecha en x puedo ver que el resultado me arroja un valor de 
tipo "long", por lo que debo aplicar Cast, para ello antepongo 
a la funcion cuyo resultado asignare a x el tipo de variable 
que tendra x en este caso int, por lo tanto:
int x;
long y;
x = (int)y

Un metodo estatico requiere para llamarlo que coloques la clase 
seguido de punto y el nombre del metodo que deseas utilizar.
A diferencia un metodo no estatico requiere un objeto, es decir 
instaciar la clase y sobre ese objeto podremos utilizar el este 
metodo.

La clase Scanner posee dos metodos no estaticos que son los que 
usaremos mas seguido, como lo son nextLine() y nextInt, ambos 
metodos al ser no estaticos para ser usados requeriran de un 
objeto de tipo Scanner para llamarlos. Por lo que:
Scanner entrada = new Scanner(System.in);
Vease que dentro del objeto que estamos creando la clase Scanner 
recibe System.in que es la fuente de entrada de entrada de la 
informacion que obtendremos a traves de la consola mediante el 
teclado, y que puede ser asignado a una variable.
String frase = scanner.nextLine();


Una manera de obtener un cifra decimal significativa, es decir 
que el resultado de una expresion numerica tenga un numero 
especifico de decimales luego de la coma es usando un formato.
Ejemplo:
Si por ejemplo tenemos un numero doble x = 10.0 y lo dividimos por 
ejemplo entre 3 este resultado al imprimirlo nos generara una 
cantidad de decimales muy grande y poco practica, por lo que si 
deseamos imprimir este resultado usamos un formato que defina la 
cantidad exacta de cifras significativas que deseamos representar.
Por ejemplo:
System.out.printf("%1.2", x/3);
Output: 3,33
Como podemos ver la expresion a la izquierda dentro del argumento de 
printf "%1.2" va a representar el formato, el "2" indica que queremos 
dos cifras significativas, podemos ver tambien una letra "f" luego de 
la palabra print que indica que vamos a hacer uso de un formato en la 
salida de datos.

Sintaxis de las matrices o arreglos:
int [] mi_matriz=new int[10]
Otra manera de declarar matriz es asignando los valores directamente 
entre {}
String [] mi_matriz={"elemento1", "elemento2", "elemento3", "elemento4"}

Sintaxis foreach
String [] mi_matriz=new String[]
for(String elemento:mi_matriz)
String representa el tipo de dato de la matriz a recorrer, elemento es 
el nombre que le daremos al iterador para recorrer la matriz(similar a 
i en el ciclo for) y mi_matriz el nombre de la matriz a recorrer.

Si por ejemplo quiero recorrer un Array e imprimer cada uno de sus valores, podemos hacer lo utilizando un foreach
for(String elemento:mi_matriz) {
	System.out.println(elemento)
}

Para recorrer un array bidimensional con un ciclo for, lo hacemos de 
esta manera:

int[][] matriz = new int[10][10] Ejemplo matriz bidimensional.

for (int i = 0; i < matriz.length; i++) {
			System.out.println("");
			for (int j = 0; j < matriz.length; j++) {
				System.out.print(matriz[i][j] + " ");
			}

En el caso del ciclo foeach para recorrer un array bidimensional usamos la siguiente estructura:

for (int[] fila : matriz) {
			System.out.println("");
			for (int columna : fila) {
				System.out.print(columna + " ");
			}

"""POO"""
metodo constructor: Se encarga de dar un estado inicial a nuestros 
objetos.

un metodo contructor que se inicializa vacio(sin argumentos) puede 
definir valores iniciales para los atributos de la clase.

Los metodos Setters y Getters se usan para poder definir y obtener 
los valores contenidos dentro de variables encapsuladas(Variables 
que poseen modificadores de acceso privado), para ello tenemos la 
facultad de generarlas automaticamente a traves del IDE o podemos 
definirlas por nosotros mismos siempre que respetemos los principios 
basicos de su sintaxis.
En el caso de un Getter:
public data_type method_name_getter() {
	
	return result;
}

El modificador de acceso siempre sera publico ya que es la unica 
opcion que nos va a permitir acceder a este metodo desde otras 
clases.
El tipo de dato ira en funcion de lo que queramos obtener, no 
necesariamente sera el valor directo de esta variable, muchas 
veces podemos agregar algun otro elemento que defina esa variable, 
puede ser una frase o lo que se necesite para expresar esta variable 
pero el tipo de resultado es lo que definira el tipo de dato que 
tendra la firma del metodo.
El nombre del metodo por convencion sera getNombreDelAtributo pero 
podemos elegir el nombre mas conveniente que necesitemos.
Dentro del cuerpo ira la definicion del metodo, si maneja algun otro 
detalle que queramos agregar y luego el return sera lo que nos devuelva
cuando lo llamemos utilizando un objeto de la clase que lo contenga 
seguido de un punto y el nombre que definamos para el metodo Getter.

En el caso de un Setter:
public void method_name_setter() {
	varible = valor_asignado;
}

La variable corresponde a la variable que se declaro previamente en el 
metodo constructor, como se inicializo con un valor previamente en un 
metodo constructor sin argumentos, la asignacion del valor puede hacerse 
directamente dentro del metodo Setter, pero normalmente el metodo constructor estara definido con el estado inicial del objeto que corresponda a la Clase, por lo que el Setter llevara dentro this.variable = variable; sin embargo a fines practicos el cuerpo 
del metodo ira de la siguiente forma.

public void method_name_setter(data_type nombre_atributo) {
	variable = nombre_atributo;
}
El atributo o el nombre que colocamos en la definicion puede ser 
cualquiera pero debe tener referencia al nombre del atributo de la 
variable que queremos asiganar al metodo Setter.
Si al nombre del atributo le colocamos el mismo al cual hacer 
referencia el metodo Setter(es decir el mismo nombre de la variable), para diferenciarlo usaremos la palabra this la cual hara referencia a 
la variable de la clase, mientras que la que estamos asignando(que es la que no lleva el this) hara referencia a la variable del argumento.
public void method_name_setter(data_type variable) {
	this.variable = variable;
}
Con lo que al instanciar un objeto y llamar a este metodo podemos definir un valor para el mismo haciendo uso del tipo de variable que 
maneja.

objeto.method_name_setter(atributo_valor_asignado);
System.out.println(objeto.variable) -> output = atributo_valor_asignado

Si queremos comparar cadenas de caracteres recordar que podemos hacerlo 
usando el metodo equals(metodo no estatico).
variable ="cadena"
variable.equals("cadena") -> true
variable.equals("otracosa") -> false

La palabra final es utilizada para denotar que una variable u objeto 
es constante, es decir no se podra modificar su valor fuera de la 
declaracion de la misma.
private final String variable; si es de caracter no estatico
private static final String variable; si es de caracter estatico

Metodos Static:
*No actuan sobre objetos.
*No acceden a campos de ejemplar(variables/constantes declaradas en 
la clase), a menos que estas sean tambien static.
*Para llamarlos se utiliza el nombre_clase.nombre_metodo

El principio de la sustitucion es una de las utilidades del polimorfismo, y describe que un objeto de una clase hija puede comportarse como un objeto de una clase padre, es decir siempre 
vamos a poder utilizar un objeto de la subclase o clase hija 
cuando el programa espere un objeto de la super clase o clase 
padre, o lo que es lo mismo un objeto puede comparterse de 
diferentes maneras dependiendo del contexto.

Podemos aplicar Casting tanto a numeros como objetos, por ejemplo 
si tuvieses dos clases Clase1 y Clase2:
Clase2 nuevo_nombre_objeto=(Clase2) actual_nombre_objeto 
en donde el actual_nombre_objeto es un objeto de tipo Clase1.

Al declarar una clase como final, esto hace que esta clase no 
pueda ser heredada por otras clases.

Recordar que una clase es abstracta cuado posee al menos un metodo 
abstracto. Un metodo abstracto es un metodo sin implementacion.
public abstract data_type name_method();

Enumerados es una clase que permite crear objetos los cuales van a 
almacenar un numero fijo e invariable de valores, los cuales serviran 
con valor representativo de este objeto cada vez que se necesite.
Un ejemplo de ello podrian ser los dias de la semana, sabemos que la 
semana esta compuesta por 7 dias los cuales poseen una designacion 
que es fija e invariable, para estos casos podremos utilizar enum
public enum Dias {LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, 
SABADO, DOMINGO};

De esta manera podremos crear variables de tipo Dia los cuales van 
a almacenar unicamente los valores contenidos en el enum
Dia l = Dia.LUNES;

Al igual que las clases abstractas una interfaz no se puede instanciar 
todos sus metodos son publicos y abstractos, no se implementan solo se definen, no tienen variables mas si pueden contener constantes.

En la API de java las clases estan escritas en letra normal y las 
interfaces en letra cursiva

Los Arrays estan definidos por el tipo de elementos que contienen, sin 
embargo cuando el Array contiene objetos se dice que es un Array de 
tipo Object

"""GENERAR UN ARRAY DINAMICO"""
Si necesitara generar un Arry dinamico es decir cuya dimension venga 
definida por el numero de insercion de elementos que introduzca el 
usuario podemos hacer uso de un Array de Strings, que tome la linea 
de insercion que a introducido el usuario y defina bajo que parametros 
tomara cada elemento.
Ejemplo:
String[] array = scanner.nextLine().split(" ");
En esta linea de codigo declaramos un Array de tipo String el cual 
va a tomar toda la cadena contenida en la linea usando el scanner.nextLine() y asignara todos los elementos de la linea que 
este separados por un espacio utilizando el metodo .split(" ").
Si tenemos por ejemplo:
1 2 3 4 5 6
El array que obtendremos sera este Array={1,2,3,4,5,6} 

Recordar que las constantes deben declararse utilizando letras 
mayusculas y separadas por "_". En el caso de una interfaz la 
manera correcta de declarar una constante seria la siguiente:
public static final data_type CONSTANT_NAME = value;
En el caso de eclipe es posible obviar las palabras public 
static y final ya que al declararla dentro de una interfaz esta 
sera asumida directamente como una constante, sin embargo es 
importante respetar el tipo de variable, correcta sintaxis 
(UpperCase y cada palabra separada por "_").

Recordar que no se puede instanciar una interfaz pero si podemos 
instanciar una interfaz que este implementada en una clase y 
asignar este objeto a uno del tipo de una clase en la que este 
implementada.

"""CLASES INTERNAS"""
•Para acceder a los campos privados de una clase desde otra clase
•Para ocultar una clase de otras pertenecientes al mismo paquete
•PAra crear clases internas "anonimas", muy utiles para gestionar 
eventos y retrollamadas(llamadas a si misma)
•Cuando sola una clase debe acceder a los campos de ejemplar de otra 
clase 

public class Clase1 {
	private class Clase2 {
		codigo de la Clase2
	}
codigo de la clase 1	
}

"""CLASES INTERNAS LOCALES"""
•Una clase dentro de un metodo.
•Cuando se utilizan estos tipos de clases y porque?
	•Son utiles cuando solo se va a utilizar(instanciar) 
	la clase interna una vez. El objetivo es simplificar
	aun mas el codigo
	•Su ambito queda restringido al metodo donde son 
	declaradas.
•Ventajas:
	•Estan muy encapsuladas. Ni siquiera la clase a la que 
	pertenecen puede acceder a ella. Tan solo puede acceder 
	a ella el metodo donde estan declaradas.
	•El codigo resulta mas simple

public class Clase_Externa{
	public void metodo() {
		class Clase_Interna_Locasl{
			codigo de la clase interna;
		}
	codigo del metodo;	
	}
codigo de la clase externa	
}

"""CREAR UNA LAMINA"""
•La clase JPanel es la encargada de construir laminas 
donde poder dibujar y escribir. Debemos crear una clase 
que herede de JPanel

****Colorear****
•Para Colorear los elementos contenidos en nuestra Lamina
primero debemos crear como siempre nuestra clase Marco y 
Lamina como veniamos haciendo, crear el metodo void de 
paintComponent(Graphics g) para poder llamar al metodo 
padre super.paintComponent(g), luego casteamos el 
g a Graphics2D y creamos un retangulo por ejemplo 
intanciando Rectangle2D, ya en este momento vamos a 
tener nuestro marco, la lamina y un rectangulo para 
comenzar, ahora utilizamos el objeto g2 lo pintamos 
utilizando el metodo setPaint(Color.AZUL) de azul 
por ejemplo y con el metodo .fill generamos el 
rectangulo y a su vez lo rellenamos con el color que 
le asignamos anteriormente g2.fill(rectangulo).

•Si queremos un color especifico, dentro del metodo 
setPaint instanciamos un objeto de tipo Color para 
poder llamar al constructor de color y usar alguno 
de los metodos que nos ofrecen mas opciones a la 
hora de configurar el color.
Ejemplo
g2.setPaint(new Color(r, g, b, a)) inclusive a este 
color podemos agregarles otras modificaciones como 
hacerlos mas brillantes(puede hacerse mas de una vez)
g2.setPaint(new Color(r, g, b, a).brigther())
o mas oscuro g2.setPaint(new Color(r, g, b, a).darker())

•Podemos colorear ademas la Lamina utilizando la 
instancia de Lamina que creamos previamente para 
agregarla al marco, posteriormente de agregarla al 
marco simplemente utilizando el metodo setBackground 
le damos un color a la Lamina.
Ejemplo:
miLamina.setBackground(Color.RED) rojo por ejemplo.

•Aun cuando usamos el metodo fill para generar una 
figura con relleno directamente, podemos usar 
nuevamente el metodo draw si deseamos darle un color 
diferente a los contornos de las mismas.

•Es importante recalcar que para dar color tanto al 
contorno como al relleno de la figura primero debemos 
llamar el metodo setPaint y aplicarlo al objeto 
Graphics2D antes de llamar al metodo fill o draw.

•Con miLamina.setBackground(SytemColor.window) por 
ejemplo podemos dar el color por defecto del sistema 
windows que estemos utilizando al fondo de la lamina.









